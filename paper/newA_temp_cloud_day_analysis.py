# -*- coding: utf-8 -*-
"""newA_temp_cloud_day_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i3eFbdl87rP4fsVFKutDd-j4cB9kC8S4
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install geopandas
# !pip install rioxarray

import xarray as xr
import numpy as np
import pandas as pd
import geopandas as gpd
import rioxarray
from geopandas import read_file as gpd_read_file

# shapefiles
shp_areas = gpd.read_file("/content/drive/MyDrive/shapes_colab/SEC_CLIM.shp")
shp_areas = shp_areas.dissolve('COD_REGION')
shp_areas = shp_areas[shp_areas["SECTOR"].isin(["COSTA NORTE","SIERRA NORTE ORIENTAL"])]

# datasets
elev = xr.open_dataset("/content/drive/MyDrive/PISCOeo_pm_big_data/Spatial_co_variables/DEM.nc")

tmax_sc = xr.open_dataset("/content/drive/MyDrive/DATA_research/PISCOt/version_release_candidate_rc/tmax/tmax_daily_2006.nc").sel(time="2006-08-24")
tmax_sfc = xr.open_dataset("/content/drive/MyDrive/DATA_research/PISCOt/version_release_candidate_rc/tmax/tmax_daily_2007.nc").sel(time="2007-08-25")

tmin_sc = xr.open_dataset("/content/drive/MyDrive/DATA_research/PISCOt/version_release_candidate_rc/tmin/tmin_daily_2006.nc").sel(time="2006-08-24")
tmin_sfc = xr.open_dataset("/content/drive/MyDrive/DATA_research/PISCOt/version_release_candidate_rc/tmin/tmin_daily_2007.nc").sel(time="2007-08-25")

# functions to mask grids

def xr_crop(shp_i, netcdf_i):
  
  # get box
  box_i = shp_i.total_bounds
  
  # crop based on box
  crop_netcdf_i = netcdf_i.where((netcdf_i["longitude"] > box_i[0]) & # min lon
                                 (netcdf_i["longitude"] < box_i[2]) & # max lon
                                 (netcdf_i["latitude"] > box_i[1]) & # min lat
                                 (netcdf_i["latitude"] < box_i[3]), # max lat
                                 drop = True)
  
  return crop_netcdf_i

def xr_shp_to_grid(shp_i, netcdf_array):

  # get real box
  shp_i_geometry = shp_i.geometry

  # adding crs
  mask = netcdf_array.rio.set_crs(shp_i.crs)

  # "rasterizing"
  mask = mask.rio.clip(shp_i_geometry, drop = False)

  # making "True/False" values
  mask.values[~np.isnan(mask.values)] = 1

  return mask.drop(["crs","time"])

def xr_shp_to_grid2(shp_i, netcdf_array):

  # get real box
  shp_i_geometry = shp_i.geometry

  # adding crs
  mask = netcdf_array.rio.set_crs(shp_i.crs)

  # "rasterizing"
  mask = mask.rio.clip(shp_i_geometry, drop = False)

  # making "True/False" values
  mask.values[~np.isnan(mask.values)] = 1

  return mask.drop(["crs"])

def xr_mask(grid_mask, netcdf_i):

  # masking
  mask_netcdf_i = netcdf_i.where(grid_mask == True)

  return mask_netcdf_i

# masking

elev_crop = xr_crop(shp_i = shp_areas, netcdf_i = elev)
shp_exp_grid = xr_shp_to_grid2(shp_i = shp_areas, netcdf_array = elev_crop.DEM)
elev_masked = xr_mask(grid_mask = shp_exp_grid, netcdf_i = elev)
elev_masked = elev_masked.where(elev_masked.latitude >= -10)

tmin_sc_crop = xr_crop(shp_i = shp_areas, netcdf_i = tmin_sc)
shp_exp_grid = xr_shp_to_grid(shp_i = shp_areas, netcdf_array = tmin_sc.tmin)
tmin_sc_masked = xr_mask(grid_mask = shp_exp_grid, netcdf_i = tmin_sc)
tmin_sc_masked = tmin_sc_masked.where(tmin_sc_masked.latitude >= -10)

tmin_sfc_crop = xr_crop(shp_i = shp_areas, netcdf_i = tmin_sfc)
shp_exp_grid = xr_shp_to_grid(shp_i = shp_areas, netcdf_array = tmin_sfc.tmin)
tmin_sfc_masked = xr_mask(grid_mask = shp_exp_grid, netcdf_i = tmin_sfc)
tmin_sfc_masked = tmin_sfc_masked.where(tmin_sfc_masked.latitude >= -10)

tmax_sc_crop = xr_crop(shp_i = shp_areas, netcdf_i = tmax_sc)
shp_exp_grid = xr_shp_to_grid(shp_i = shp_areas, netcdf_array = tmax_sc.tmax)
tmax_sc_masked = xr_mask(grid_mask = shp_exp_grid, netcdf_i = tmax_sc)
tmax_sc_masked = tmax_sc_masked.where(tmax_sc_masked.latitude >= -10)

tmax_sfc_crop = xr_crop(shp_i = shp_areas, netcdf_i = tmax_sfc)
shp_exp_grid = xr_shp_to_grid(shp_i = shp_areas, netcdf_array = tmax_sfc.tmax)
tmax_sfc_masked = xr_mask(grid_mask = shp_exp_grid, netcdf_i = tmax_sfc)
tmax_sfc_masked = tmax_sfc_masked.where(tmax_sfc_masked.latitude >= -10)

# computing Tmean

tmean_sc_masked = (tmin_sc_masked.tmin + tmax_sc_masked.tmax)/2
tmean_sfc_masked = (tmin_sfc_masked.tmin + tmax_sfc_masked.tmax)/2
diff_sc_sfc = tmean_sc_masked - tmean_sfc_masked

# Tmean spatial plot

tmean_sc_df = tmean_sc_masked.to_dataset(name="values").to_dataframe().reset_index().drop(["time"], axis=1).dropna(axis=0)
tmean_sc_df["data"] = "Clear day"

tmean_sfc_df = tmean_sfc_masked.to_dataset(name="values").to_dataframe().reset_index().drop(["time"], axis=1).dropna(axis=0)
tmean_sfc_df["data"] = "Fog-Covered day"

diff_sc_sfc_df = diff_sc_sfc.to_dataset(name="values").to_dataframe().reset_index().dropna(axis=0)
diff_sc_sfc_df["data"] = "Clear day - Fog-Covered day"

sc_sfc_df_nc = pd.concat([tmean_sc_df, tmean_sfc_df, diff_sc_sfc_df], axis=0)
sc_sfc_df_nc.to_csv("/content/drive/MyDrive/temporal/sc_sfc_df_nc.csv", index=False)

# Tmean scatterplot

tmean_sc_values = tmean_sc_masked.to_numpy().ravel()
tmean_sc_values = tmean_sc_values[~np.isnan(tmean_sc_values)]
tmean_sfc_values = tmean_sfc_masked.to_numpy().ravel()
tmean_sfc_values = tmean_sfc_values[~np.isnan(tmean_sfc_values)]
diff_sc_sfc_values = diff_sc_sfc.to_numpy().ravel()
diff_sc_sfc_values = diff_sc_sfc_values[~np.isnan(diff_sc_sfc_values)]
elev_values = elev_masked.DEM.to_numpy().ravel()
elev_values = elev_values[~np.isnan(elev_values)]

tmean_sc_df = pd.DataFrame({"elevation":elev_values,"values":tmean_sc_values})
tmean_sc_df["data"] = "Clear day"

tmean_sfc_df = pd.DataFrame({"elevation":elev_values,"values":tmean_sfc_values})
tmean_sfc_df["data"] = "Fog-Covered day"

diff_sc_sfc_df = pd.DataFrame({"elevation":elev_values,"values":diff_sc_sfc_values})
diff_sc_sfc_df["data"] = "Clear day - Fog-Covered day"


sc_sfc_df = pd.concat([tmean_sc_df, tmean_sfc_df, diff_sc_sfc_df], axis=0)
sc_sfc_df.to_csv("/content/drive/MyDrive/temporal/sc_sfc_df.csv", index=False)

